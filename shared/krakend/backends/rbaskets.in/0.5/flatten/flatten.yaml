basePath: /
consumes.length: 1
consumes[0]: application/json
definitions.Baskets.properties.count.description: Total number of baskets in the system;
  not present if query is applied
definitions.Baskets.properties.count.type: integer
definitions.Baskets.properties.has_more.description: Indicates if there are more baskets
  to fetch
definitions.Baskets.properties.has_more.type: boolean
definitions.Baskets.properties.names.description: Collection of basket names
definitions.Baskets.properties.names.items.type: string
definitions.Baskets.properties.names.type: array
definitions.Baskets.required.length: 2
definitions.Baskets.required[0]: names
definitions.Baskets.required[1]: has_more
definitions.Baskets.type: object
definitions.Config.properties.capacity.description: Baskets capacity, defines maximum
  number of requests to store
definitions.Config.properties.capacity.type: integer
definitions.Config.properties.expand_path.description: If set to `true` the forward
  URL path will be expanded when original HTTP request contains compound path.
definitions.Config.properties.expand_path.type: boolean
definitions.Config.properties.forward_url.description: URL to forward all incoming
  requests of the basket, `empty` value disables forwarding
definitions.Config.properties.forward_url.type: string
definitions.Config.properties.insecure_tls.description: |
  If set to `true` the certificate verification will be disabled if forward URL indicates HTTPS scheme.
  **Warning:** enabling this feature has known security implications.
definitions.Config.properties.insecure_tls.type: boolean
definitions.Config.type: object
definitions.Headers.additionalProperties.description: Collection of header values
definitions.Headers.additionalProperties.items.type: string
definitions.Headers.additionalProperties.type: array
definitions.Headers.description: Map of HTTP headers, key represents name, value is
  array of values
definitions.Headers.type: object
definitions.Request.properties.body.description: Content of request body
definitions.Request.properties.body.type: string
definitions.Request.properties.content_length.description: Content lenght of request
definitions.Request.properties.content_length.type: integer
definitions.Request.properties.date.description: Date and time of request in Unix
  time ms. format (number of miliseconds elapsed since January 1, 1970 UTC)
definitions.Request.properties.date.format: int64
definitions.Request.properties.date.type: integer
definitions.Request.properties.headers.$ref: '#/definitions/Headers'
definitions.Request.properties.method.description: HTTP methof of request
definitions.Request.properties.method.type: string
definitions.Request.properties.path.description: URL path of request
definitions.Request.properties.path.type: string
definitions.Request.properties.query.description: Query parameters of request
definitions.Request.properties.query.type: string
definitions.Request.type: object
definitions.Requests.properties.count.description: Current number of collected requests
  hold by basket; not present if query is applied
definitions.Requests.properties.count.type: integer
definitions.Requests.properties.has_more.description: Indicates if there are more
  requests collected by basket to fetch
definitions.Requests.properties.has_more.type: boolean
definitions.Requests.properties.requests.description: Collection of collected requests
definitions.Requests.properties.requests.items.$ref: '#/definitions/Request'
definitions.Requests.properties.requests.type: array
definitions.Requests.properties.total_count.description: Total number of all requests
  passed through this basket; not present if query is applied
definitions.Requests.properties.total_count.type: integer
definitions.Requests.required.length: 2
definitions.Requests.required[0]: requests
definitions.Requests.required[1]: has_more
definitions.Requests.type: object
definitions.Response.properties.body.description: Content of response body
definitions.Response.properties.body.type: string
definitions.Response.properties.headers.$ref: '#/definitions/Headers'
definitions.Response.properties.is_template.description: |
  If set to `true` the body is treated as [HTML template](https://golang.org/pkg/html/template) that accepts
  input from request parameters.
definitions.Response.properties.is_template.type: boolean
definitions.Response.properties.status.description: The HTTP status code to reply
  with
definitions.Response.properties.status.type: integer
definitions.Response.type: object
definitions.Token.properties.token.description: Secure token to manage the basket,
  generated by system
definitions.Token.properties.token.type: string
definitions.Token.required.length: 1
definitions.Token.required[0]: token
definitions.Token.type: object
host: rbaskets.in
info.contact.name: darklynx
info.contact.url: https://github.com/darklynx
info.description: |
  RESTful API of [Request Baskets](https://rbaskets.in) service.

  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful
  API or web UI.

  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description.
info.license.name: MIT
info.license.url: https://github.com/darklynx/request-baskets/blob/master/LICENSE
info.title: Request Baskets
info.version: "0.5"
info.x-logo.url: https://api.apis.guru/v2/cache/logo/https_raw.githubusercontent.com_darklynx_request-baskets_master_doc_logo.svg
info.x-origin.length: 1
info.x-origin[0].format: swagger
info.x-origin[0].url: https://raw.githubusercontent.com/darklynx/request-baskets/master/doc/api-swagger.yaml
info.x-origin[0].version: "2.0"
info.x-preferred: true
info.x-providerName: rbaskets.in
paths./baskets.get.description: Fetches a list of basket names managed by service.
  Require master token.
paths./baskets.get.parameters.length: 3
paths./baskets.get.parameters[0].description: Maximum number of basket names to return;
  default 20
paths./baskets.get.parameters[0].in: query
paths./baskets.get.parameters[0].name: max
paths./baskets.get.parameters[0].required: false
paths./baskets.get.parameters[0].type: integer
paths./baskets.get.parameters[1].description: Number of basket names to skip; default
  0
paths./baskets.get.parameters[1].in: query
paths./baskets.get.parameters[1].name: skip
paths./baskets.get.parameters[1].required: false
paths./baskets.get.parameters[1].type: integer
paths./baskets.get.parameters[2].description: Query string to filter result, only
  those basket names that match the query will be included in response
paths./baskets.get.parameters[2].in: query
paths./baskets.get.parameters[2].name: q
paths./baskets.get.parameters[2].required: false
paths./baskets.get.parameters[2].type: string
paths./baskets.get.responses.200.description: OK. Returns list of available baskets.
paths./baskets.get.responses.200.schema.$ref: '#/definitions/Baskets'
paths./baskets.get.responses.204.description: No Content. No baskets available for
  specified limits
paths./baskets.get.responses.401.description: Unauthorized. Invalid or missing master
  token
paths./baskets.get.security.length: 1
paths./baskets.get.security[0].basket_token.length: 0
paths./baskets.get.summary: Get baskets
paths./baskets.get.tags.length: 1
paths./baskets.get.tags[0]: baskets
paths./baskets/{name}.delete.description: Permanently deletes this basket and all
  collected requests.
paths./baskets/{name}.delete.parameters.length: 1
paths./baskets/{name}.delete.parameters[0].description: The basket name
paths./baskets/{name}.delete.parameters[0].in: path
paths./baskets/{name}.delete.parameters[0].name: name
paths./baskets/{name}.delete.parameters[0].required: true
paths./baskets/{name}.delete.parameters[0].type: string
paths./baskets/{name}.delete.responses.204.description: No Content. Basket is deleted
paths./baskets/{name}.delete.responses.401.description: Unauthorized. Invalid or missing
  basket token
paths./baskets/{name}.delete.responses.404.description: Not Found. No basket with
  such name
paths./baskets/{name}.delete.security.length: 1
paths./baskets/{name}.delete.security[0].basket_token.length: 0
paths./baskets/{name}.delete.summary: Delete basket
paths./baskets/{name}.delete.tags.length: 1
paths./baskets/{name}.delete.tags[0]: baskets
paths./baskets/{name}.get.description: Retrieves configuration settings of this basket.
paths./baskets/{name}.get.parameters.length: 1
paths./baskets/{name}.get.parameters[0].description: The basket name
paths./baskets/{name}.get.parameters[0].in: path
paths./baskets/{name}.get.parameters[0].name: name
paths./baskets/{name}.get.parameters[0].required: true
paths./baskets/{name}.get.parameters[0].type: string
paths./baskets/{name}.get.responses.200.description: OK. Returns basket configuration
paths./baskets/{name}.get.responses.200.schema.$ref: '#/definitions/Config'
paths./baskets/{name}.get.responses.401.description: Unauthorized. Invalid or missing
  basket token
paths./baskets/{name}.get.responses.404.description: Not Found. No basket with such
  name
paths./baskets/{name}.get.security.length: 1
paths./baskets/{name}.get.security[0].basket_token.length: 0
paths./baskets/{name}.get.summary: Get basket settings
paths./baskets/{name}.get.tags.length: 1
paths./baskets/{name}.get.tags[0]: baskets
paths./baskets/{name}.post.description: Creates a new basket with this name.
paths./baskets/{name}.post.parameters.length: 2
paths./baskets/{name}.post.parameters[0].description: The name of new basket
paths./baskets/{name}.post.parameters[0].in: path
paths./baskets/{name}.post.parameters[0].name: name
paths./baskets/{name}.post.parameters[0].required: true
paths./baskets/{name}.post.parameters[0].type: string
paths./baskets/{name}.post.parameters[1].description: Basket configuration
paths./baskets/{name}.post.parameters[1].in: body
paths./baskets/{name}.post.parameters[1].name: config
paths./baskets/{name}.post.parameters[1].required: false
paths./baskets/{name}.post.parameters[1].schema.$ref: '#/definitions/Config'
paths./baskets/{name}.post.responses.201.description: Created. Indicates that basket
  is successfully created
paths./baskets/{name}.post.responses.201.schema.$ref: '#/definitions/Token'
paths./baskets/{name}.post.responses.400.description: Bad Request. Failed to parse
  JSON into basket configuration object.
paths./baskets/{name}.post.responses.403.description: Forbidden. Indicates that basket
  name conflicts with reserved paths; e.g. `baskets`, `web`, etc.
paths./baskets/{name}.post.responses.409.description: Conflict. Indicates that basket
  with such name already exists
paths./baskets/{name}.post.responses.422.description: Unprocessable Entity. Basket
  configuration is not valid.
paths./baskets/{name}.post.summary: Create new basket
paths./baskets/{name}.post.tags.length: 1
paths./baskets/{name}.post.tags[0]: baskets
paths./baskets/{name}.put.description: |
  Updates configuration settings of this basket.

  Special configuration parameters for request forwarding:
    * `insecure_tls` controls certificate verification when forwarding requests. Setting this parameter to `true`
    allows to forward collected HTTP requests via HTTPS protocol even if the forward end-point is configured with
    self-signed TLS/SSL certificate. **Warning:** enabling this feature has known security implications.
    * `expand_path` changes the logic of constructing taget URL when forwarding requests. If this parameter is
    set to `true` the forward URL path will be expanded when original HTTP request contains compound path. For
    example, a basket with name **server1** is configured to forward all requests to `http://server1.intranet:8001/myservice`
    and it has received an HTTP request like `GET http://baskets.example.com/server1/component/123/events?status=OK`
    then depending on `expand_path` settings the request will be forwarded to:
      * `true` => `GET http://server1.intranet:8001/myservice/component/123/events?status=OK`
      * `false` => `GET http://server1.intranet:8001/myservice?status=OK`
paths./baskets/{name}.put.parameters.length: 2
paths./baskets/{name}.put.parameters[0].description: The basket name
paths./baskets/{name}.put.parameters[0].in: path
paths./baskets/{name}.put.parameters[0].name: name
paths./baskets/{name}.put.parameters[0].required: true
paths./baskets/{name}.put.parameters[0].type: string
paths./baskets/{name}.put.parameters[1].description: New configuration to apply
paths./baskets/{name}.put.parameters[1].in: body
paths./baskets/{name}.put.parameters[1].name: config
paths./baskets/{name}.put.parameters[1].required: true
paths./baskets/{name}.put.parameters[1].schema.$ref: '#/definitions/Config'
paths./baskets/{name}.put.responses.204.description: No Content. Basket configuration
  is updated
paths./baskets/{name}.put.responses.400.description: Bad Request. Failed to parse
  JSON into basket configuration object.
paths./baskets/{name}.put.responses.401.description: Unauthorized. Invalid or missing
  basket token
paths./baskets/{name}.put.responses.404.description: Not Found. No basket with such
  name
paths./baskets/{name}.put.responses.422.description: Unprocessable Entity. Basket
  configuration is not valid.
paths./baskets/{name}.put.security.length: 1
paths./baskets/{name}.put.security[0].basket_token.length: 0
paths./baskets/{name}.put.summary: Update basket settings
paths./baskets/{name}.put.tags.length: 1
paths./baskets/{name}.put.tags[0]: baskets
paths./baskets/{name}/requests.delete.description: Deletes all requests collected
  by this basket.
paths./baskets/{name}/requests.delete.parameters.length: 1
paths./baskets/{name}/requests.delete.parameters[0].description: The basket name
paths./baskets/{name}/requests.delete.parameters[0].in: path
paths./baskets/{name}/requests.delete.parameters[0].name: name
paths./baskets/{name}/requests.delete.parameters[0].required: true
paths./baskets/{name}/requests.delete.parameters[0].type: string
paths./baskets/{name}/requests.delete.responses.204.description: No Content. Basket
  requests are cleared
paths./baskets/{name}/requests.delete.responses.401.description: Unauthorized. Invalid
  or missing basket token
paths./baskets/{name}/requests.delete.responses.404.description: Not Found. No basket
  with such name
paths./baskets/{name}/requests.delete.security.length: 1
paths./baskets/{name}/requests.delete.security[0].basket_token.length: 0
paths./baskets/{name}/requests.delete.summary: Delete all requests
paths./baskets/{name}/requests.delete.tags.length: 1
paths./baskets/{name}/requests.delete.tags[0]: requests
paths./baskets/{name}/requests.get.description: Fetches collection of requests collected
  by this basket.
paths./baskets/{name}/requests.get.parameters.length: 5
paths./baskets/{name}/requests.get.parameters[0].description: The basket name
paths./baskets/{name}/requests.get.parameters[0].in: path
paths./baskets/{name}/requests.get.parameters[0].name: name
paths./baskets/{name}/requests.get.parameters[0].required: true
paths./baskets/{name}/requests.get.parameters[0].type: string
paths./baskets/{name}/requests.get.parameters[1].description: Maximum number of requests
  to return; default 20
paths./baskets/{name}/requests.get.parameters[1].in: query
paths./baskets/{name}/requests.get.parameters[1].name: max
paths./baskets/{name}/requests.get.parameters[1].required: false
paths./baskets/{name}/requests.get.parameters[1].type: integer
paths./baskets/{name}/requests.get.parameters[2].description: Number of requests to
  skip; default 0
paths./baskets/{name}/requests.get.parameters[2].in: query
paths./baskets/{name}/requests.get.parameters[2].name: skip
paths./baskets/{name}/requests.get.parameters[2].required: false
paths./baskets/{name}/requests.get.parameters[2].type: integer
paths./baskets/{name}/requests.get.parameters[3].description: Query string to filter
  result, only requests that match the query will be included in response
paths./baskets/{name}/requests.get.parameters[3].in: query
paths./baskets/{name}/requests.get.parameters[3].name: q
paths./baskets/{name}/requests.get.parameters[3].required: false
paths./baskets/{name}/requests.get.parameters[3].type: string
paths./baskets/{name}/requests.get.parameters[4].description: |
  Defines what is taken into account when filtering is applied: `body` - search in content body of collected requests,
  `query` - search among query parameters of collected requests, `headers` - search among request header values,
  `any` - search anywhere; default `any`
paths./baskets/{name}/requests.get.parameters[4].enum.length: 4
paths./baskets/{name}/requests.get.parameters[4].enum[0]: any
paths./baskets/{name}/requests.get.parameters[4].enum[1]: body
paths./baskets/{name}/requests.get.parameters[4].enum[2]: query
paths./baskets/{name}/requests.get.parameters[4].enum[3]: headers
paths./baskets/{name}/requests.get.parameters[4].in: query
paths./baskets/{name}/requests.get.parameters[4].name: in
paths./baskets/{name}/requests.get.parameters[4].required: false
paths./baskets/{name}/requests.get.parameters[4].type: string
paths./baskets/{name}/requests.get.responses.200.description: OK. Returns list of
  basket requests.
paths./baskets/{name}/requests.get.responses.200.schema.$ref: '#/definitions/Requests'
paths./baskets/{name}/requests.get.responses.204.description: No Content. No requests
  found for specified limits
paths./baskets/{name}/requests.get.responses.401.description: Unauthorized. Invalid
  or missing basket token
paths./baskets/{name}/requests.get.responses.404.description: Not Found. No basket
  with such name
paths./baskets/{name}/requests.get.security.length: 1
paths./baskets/{name}/requests.get.security[0].basket_token.length: 0
paths./baskets/{name}/requests.get.summary: Get collected requests
paths./baskets/{name}/requests.get.tags.length: 1
paths./baskets/{name}/requests.get.tags[0]: requests
paths./baskets/{name}/responses/{method}.get.description: |
  Retrieves information about configured response of the basket. Service will reply with this response to any
  HTTP request sent to the basket with appropriate HTTP method.

  If nothing is configured, the default response is HTTP 200 - OK with empty content.
paths./baskets/{name}/responses/{method}.get.parameters.length: 2
paths./baskets/{name}/responses/{method}.get.parameters[0].description: The basket
  name
paths./baskets/{name}/responses/{method}.get.parameters[0].in: path
paths./baskets/{name}/responses/{method}.get.parameters[0].name: name
paths./baskets/{name}/responses/{method}.get.parameters[0].required: true
paths./baskets/{name}/responses/{method}.get.parameters[0].type: string
paths./baskets/{name}/responses/{method}.get.parameters[1].description: The HTTP method
  this response is configured for
paths./baskets/{name}/responses/{method}.get.parameters[1].enum.length: 9
paths./baskets/{name}/responses/{method}.get.parameters[1].enum[0]: GET
paths./baskets/{name}/responses/{method}.get.parameters[1].enum[1]: HEAD
paths./baskets/{name}/responses/{method}.get.parameters[1].enum[2]: POST
paths./baskets/{name}/responses/{method}.get.parameters[1].enum[3]: PUT
paths./baskets/{name}/responses/{method}.get.parameters[1].enum[4]: PATCH
paths./baskets/{name}/responses/{method}.get.parameters[1].enum[5]: DELETE
paths./baskets/{name}/responses/{method}.get.parameters[1].enum[6]: CONNECT
paths./baskets/{name}/responses/{method}.get.parameters[1].enum[7]: OPTIONS
paths./baskets/{name}/responses/{method}.get.parameters[1].enum[8]: TRACE
paths./baskets/{name}/responses/{method}.get.parameters[1].in: path
paths./baskets/{name}/responses/{method}.get.parameters[1].name: method
paths./baskets/{name}/responses/{method}.get.parameters[1].required: true
paths./baskets/{name}/responses/{method}.get.parameters[1].type: string
paths./baskets/{name}/responses/{method}.get.responses.200.description: OK. Returns
  configured response information
paths./baskets/{name}/responses/{method}.get.responses.200.schema.$ref: '#/definitions/Response'
paths./baskets/{name}/responses/{method}.get.responses.401.description: Unauthorized.
  Invalid or missing basket token
paths./baskets/{name}/responses/{method}.get.responses.404.description: Not Found.
  No basket with such name
paths./baskets/{name}/responses/{method}.get.security.length: 1
paths./baskets/{name}/responses/{method}.get.security[0].basket_token.length: 0
paths./baskets/{name}/responses/{method}.get.summary: Get response settings
paths./baskets/{name}/responses/{method}.get.tags.length: 1
paths./baskets/{name}/responses/{method}.get.tags[0]: responses
paths./baskets/{name}/responses/{method}.put.description: |
  Allows to configure HTTP response of this basket. The service will reply with configured response to any HTTP
  request sent to the basket with appropriate HTTP method.

  If nothing is configured, the default response is HTTP 200 - OK with empty content.
paths./baskets/{name}/responses/{method}.put.parameters.length: 3
paths./baskets/{name}/responses/{method}.put.parameters[0].description: The basket
  name
paths./baskets/{name}/responses/{method}.put.parameters[0].in: path
paths./baskets/{name}/responses/{method}.put.parameters[0].name: name
paths./baskets/{name}/responses/{method}.put.parameters[0].required: true
paths./baskets/{name}/responses/{method}.put.parameters[0].type: string
paths./baskets/{name}/responses/{method}.put.parameters[1].description: The HTTP method
  this response is configured for
paths./baskets/{name}/responses/{method}.put.parameters[1].enum.length: 9
paths./baskets/{name}/responses/{method}.put.parameters[1].enum[0]: GET
paths./baskets/{name}/responses/{method}.put.parameters[1].enum[1]: HEAD
paths./baskets/{name}/responses/{method}.put.parameters[1].enum[2]: POST
paths./baskets/{name}/responses/{method}.put.parameters[1].enum[3]: PUT
paths./baskets/{name}/responses/{method}.put.parameters[1].enum[4]: PATCH
paths./baskets/{name}/responses/{method}.put.parameters[1].enum[5]: DELETE
paths./baskets/{name}/responses/{method}.put.parameters[1].enum[6]: CONNECT
paths./baskets/{name}/responses/{method}.put.parameters[1].enum[7]: OPTIONS
paths./baskets/{name}/responses/{method}.put.parameters[1].enum[8]: TRACE
paths./baskets/{name}/responses/{method}.put.parameters[1].in: path
paths./baskets/{name}/responses/{method}.put.parameters[1].name: method
paths./baskets/{name}/responses/{method}.put.parameters[1].required: true
paths./baskets/{name}/responses/{method}.put.parameters[1].type: string
paths./baskets/{name}/responses/{method}.put.parameters[2].description: HTTP response
  configuration
paths./baskets/{name}/responses/{method}.put.parameters[2].in: body
paths./baskets/{name}/responses/{method}.put.parameters[2].name: response
paths./baskets/{name}/responses/{method}.put.parameters[2].required: true
paths./baskets/{name}/responses/{method}.put.parameters[2].schema.$ref: '#/definitions/Response'
paths./baskets/{name}/responses/{method}.put.responses.204.description: No Content.
  Response configuration is updated
paths./baskets/{name}/responses/{method}.put.responses.400.description: Bad Request.
  Failed to parse JSON into response configuration object.
paths./baskets/{name}/responses/{method}.put.responses.401.description: Unauthorized.
  Invalid or missing basket token
paths./baskets/{name}/responses/{method}.put.responses.404.description: Not Found.
  No basket with such name
paths./baskets/{name}/responses/{method}.put.responses.422.description: Unprocessable
  Entity. Response configuration is not valid.
paths./baskets/{name}/responses/{method}.put.security.length: 1
paths./baskets/{name}/responses/{method}.put.security[0].basket_token.length: 0
paths./baskets/{name}/responses/{method}.put.summary: Update response settings
paths./baskets/{name}/responses/{method}.put.tags.length: 1
paths./baskets/{name}/responses/{method}.put.tags[0]: responses
produces.length: 1
produces[0]: application/json
schemes.length: 1
schemes[0]: https
securityDefinitions.basket_token.description: Basket assigned secure token
securityDefinitions.basket_token.in: header
securityDefinitions.basket_token.name: Authorization
securityDefinitions.basket_token.type: apiKey
swagger: "2.0"
tags.length: 3
tags[0].description: Manage baskets
tags[0].name: baskets
tags[1].description: Configure basket responses
tags[1].name: responses
tags[2].description: Manage collected requests
tags[2].name: requests
